@using MineSweeper.Models
@using MineSweeper.Services
@inject GameService GameService
@inject SoundService SoundService
@inject AchievementService AchievementService
@inject PersistenceService PersistenceService
@implements IDisposable

<div class="p-4">
    <div class="max-w-6xl mx-auto">
        <div class="bg-gray-800 rounded-2xl shadow-2xl overflow-hidden">
            <div class="bg-gradient-to-r from-gray-900 to-gray-800 p-6 text-center">
                <h1 class="text-3xl md:text-4xl font-bold text-white flex items-center justify-center gap-3">
                    <span class="text-5xl animate-pulse">üí£</span>
                    <span>Play MineSweeper</span>
                </h1>
            </div>
            
            <div class="p-6 space-y-6">
                @if (_gameRestored)
                {
                    <div class="mx-auto max-w-lg">
                        <div class="p-4 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-xl text-center shadow-lg animate-pulse">
                            <p class="font-semibold flex items-center justify-center gap-2">
                                <span class="text-2xl">‚ú®</span>
                                Previous game restored!
                                <span class="text-2xl">‚ú®</span>
                            </p>
                        </div>
                    </div>
                }
                
                <div class="text-center space-y-4">
                    <DifficultySelector 
                        CurrentDifficulty="@GameService.CurrentGame?.Difficulty"
                        OnDifficultySelected="StartNewGame" />
                    
                    <GameStats OnReset="ResetCurrentGame" />
                </div>
                
                @if (GameService.CurrentGame != null)
                {
                    <div class="flex justify-center">
                        <GameBoard />
                    </div>
                }
                else
                {
                    <div class="text-center py-16">
                        <div class="inline-flex items-center justify-center w-24 h-24 bg-gray-700 rounded-full mb-4 animate-bounce">
                            <span class="text-5xl">üí£</span>
                        </div>
                        <p class="text-2xl text-gray-400 font-medium">Choose a difficulty to start playing!</p>
                        <p class="text-gray-500 mt-2">Can you clear all the mines?</p>
                    </div>
                }
            </div>
        </div>
        
        <!-- Quick Game Info -->
        <div class="mt-6 bg-gray-700 rounded-xl p-4">
            <div class="flex flex-wrap justify-between items-center gap-4">
                <div class="flex items-center gap-6">
                    <button @onclick="ToggleSound" 
                            class="flex items-center gap-2 text-gray-300 hover:text-white transition-colors">
                        <span class="text-xl">@(SoundService.SoundEnabled ? "üîä" : "üîá")</span>
                        <span class="text-sm">Sound @(SoundService.SoundEnabled ? "On" : "Off")</span>
                    </button>
                    <button @onclick="ShowHelp" 
                            class="flex items-center gap-2 text-gray-300 hover:text-white transition-colors">
                        <span class="text-xl">‚ùì</span>
                        <span class="text-sm">Help</span>
                    </button>
                </div>
                <div class="flex items-center gap-4 text-sm text-gray-400">
                    <span>Win Rate: <span class="text-white font-semibold">@AchievementService.Statistics.WinRate.ToString("F0")%</span></span>
                    <span>Streak: <span class="text-white font-semibold">@AchievementService.Statistics.CurrentWinStreak</span></span>
                    <a href="/stats" class="text-blue-400 hover:text-blue-300 transition-colors">View Full Stats ‚Üí</a>
                </div>
            </div>
        </div>
    </div>
</div>

<HelpModal IsVisible="_showHelp" OnClose="() => _showHelp = false" />

@code {
    private System.Threading.Timer? _timer;
    private bool _gameRestored = false;
    private bool _showHelp = false;
    
    protected override async Task OnInitializedAsync()
    {
        GameService.OnGameStateChanged += OnGameStateChanged;
        SoundService.OnSoundToggled += OnSoundToggled;
        _timer = new System.Threading.Timer(_ => InvokeAsync(StateHasChanged), null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
        
        // Load saved game if exists
        var savedGame = await PersistenceService.LoadGameStateAsync();
        if (savedGame != null && savedGame.Status == GameStatus.InProgress)
        {
            GameService.LoadGame(savedGame);
            _gameRestored = true;
            // Hide message after 3 seconds
            _ = Task.Delay(3000).ContinueWith(_ => 
            {
                _gameRestored = false;
                InvokeAsync(StateHasChanged);
            });
        }
    }
    
    private async void OnGameStateChanged()
    {
        await InvokeAsync(StateHasChanged);
        
        // Save game state
        await PersistenceService.SaveGameStateAsync(GameService.CurrentGame);
        
        if (GameService.CurrentGame != null)
        {
            if (GameService.CurrentGame.Status == GameStatus.Won)
            {
                await SoundService.PlayWinAsync();
                await PersistenceService.ClearGameStateAsync();
            }
            else if (GameService.CurrentGame.Status == GameStatus.Lost)
            {
                await SoundService.PlayLoseAsync();
                await PersistenceService.ClearGameStateAsync();
            }
        }
    }
    
    private async void StartNewGame(GameDifficulty difficulty)
    {
        GameService.NewGame(difficulty);
        await SoundService.PlayStartAsync();
    }
    
    private void ResetCurrentGame()
    {
        if (GameService.CurrentGame != null)
        {
            StartNewGame(GameService.CurrentGame.Difficulty);
        }
    }
    
    private void ShowHelp()
    {
        _showHelp = true;
    }
    
    private void ToggleSound()
    {
        SoundService.SoundEnabled = !SoundService.SoundEnabled;
    }
    
    private void OnSoundToggled(bool isEnabled)
    {
        InvokeAsync(StateHasChanged);
    }
    
    public void Dispose()
    {
        GameService.OnGameStateChanged -= OnGameStateChanged;
        SoundService.OnSoundToggled -= OnSoundToggled;
        _timer?.Dispose();
    }
}